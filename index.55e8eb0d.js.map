{"mappings":"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","sources":["<anon>","index.js","game/gameScene.js"],"sourcesContent":["const $c0d418836dfbaed1$export$5f56c9ecdfdf4895 = new Phaser.Class({\n    Extends: Phaser.Scene,\n    initialize: function GameScene() {\n        Phaser.Scene.call(this, {\n            key: \"gameScene\"\n        });\n    },\n    preload () {\n        this.load.image(\"backgroundGame\", \"https://i.postimg.cc/ncCJCFZ6/wallpaperbetter-com-3840x2160-1.jpg\");\n        this.load.spritesheet(\"tHex\", \"https://i.postimg.cc/SsRRc797/spritesheet.png\", {\n            frameWidth: 243,\n            frameHeight: 370\n        });\n        this.load.image(\"ground\", \"https://i.postimg.cc/8c9BWznw/ground.png\");\n    },\n    create () {\n        this.anims.create({\n            key: \"jump\",\n            frames: this.anims.generateFrameNumbers(\"tHex\", {\n                start: 1,\n                end: 1\n            }),\n            frameRate: 10\n        });\n        this.anims.create({\n            key: \"idle\",\n            frames: this.anims.generateFrameNumbers(\"tHex\", {\n                start: 0,\n                end: 0\n            }),\n            frameRate: 10\n        });\n        const { width: width , height: height  } = this.sys.game.config;\n        this.backgroundImage = this.add.tileSprite(0, 0, this.sys.game.config.width, this.sys.game.config.height, \"backgroundGame\").setOrigin(0, 0).setScrollFactor(0).setScale(1920 / width, 1200 / height);\n        const tHex = this.physics.add.sprite(1080, this.sys.game.config.height - 200, \"tHex\"); // персонаж\n        this.grounds = this.physics.add.staticGroup();\n        for(let i = 0; i < 3; i += 1){\n            const ground = this.grounds.create(1080 + i * 1080, this.sys.game.config.height, \"ground\");\n            this.physics.add.collider(tHex, ground);\n        }\n        tHex.setGravityY(800); // гравитация по вертикали\n        tHex.setScale(0.5); // масштабирование персонажа\n        const cursors = this.input.keyboard.createCursorKeys(); // объект, содержащий клавиши управления\n        const jump = ()=>{\n            if (tHex.body.touching.down) {\n                tHex.setVelocityY(-500);\n                this.isRunning = true;\n                this.score += 10; // начисление 10 баллов за прыжок\n                this.scoreText.setText(`Score: ${this.score}`); // обновление текста счета\n                tHex.anims.play(\"jump\"); // текстура прыжка\n            }\n        };\n        cursors.up.on(\"down\", jump); // прыжок по стрелке вверх\n        cursors.space.on(\"down\", jump); // прыжок по пробелу\n        this.input.on(\"pointerdown\", jump); // прыжок по нажатию экрана\n        this.speed = 5; // скорость перемещения персонажа\n        this.isRunning = false;\n        this.cameras.main.startFollow(tHex, true, 0.5, 0.5, 0, 150);\n        this.score = 0; // переменная для хранения текущего счета\n        this.scoreText = this.add.text(16, 16, \"Score: 0\", {\n            fontSize: \"32px\",\n            fill: \"#fff\",\n            fontFamily: \"MinecraftiaRegular\"\n        }); // текст счета\n        this.scoreText.setScrollFactor(0);\n        // функция обновления, перемещающая персонажа вперед\n        this.update = ()=>{\n            if (this.isRunning) {\n                tHex.x += this.speed;\n                this.backgroundImage.tilePositionX = this.cameras.main.scrollX * 0.3; // медленное движение\n            }\n            if (tHex.body.touching.down && tHex.anims.currentAnim && tHex.anims.currentAnim.key === \"jump\") tHex.anims.play(\"idle\"); // Воспроизведение обычной анимации персонажа\n            if (tHex.x > this.grounds.getChildren()[0].x + 1080) {\n                // Удалить старую землю\n                this.grounds.getChildren()[0].destroy();\n                // Добавить новую землю\n                const newGround = this.grounds.create(this.grounds.getChildren()[this.grounds.getChildren().length - 1].x + 1080, this.sys.game.config.height, \"ground\");\n                this.physics.add.collider(tHex, newGround);\n            }\n        };\n    }\n});\n\n\nconst $dad545c909cfec2d$var$config = {\n    type: Phaser.AUTO,\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH,\n        width: window.innerWidth,\n        height: window.innerHeight\n    },\n    scene: [\n        {\n            preload: $dad545c909cfec2d$var$preload,\n            create: $dad545c909cfec2d$var$create\n        },\n        (0, $c0d418836dfbaed1$export$5f56c9ecdfdf4895)\n    ],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            gravity: {\n                y: 300\n            },\n            debug: false\n        }\n    }\n};\nconst $dad545c909cfec2d$var$game = new Phaser.Game($dad545c909cfec2d$var$config);\n// функция preload отвечает за ассеты которые игра должна подтянуть для себя)\nfunction $dad545c909cfec2d$var$preload() {\n    this.load.image(\"background\", \"https://i.postimg.cc/W1j6zxMm/wallpaperbetter-com-3840x2160-3.jpg\");\n    this.load.image(\"logo\", \"https://i.postimg.cc/8Cn1XJDy/image.png\");\n    this.load.image(\"defaultPlayButtonImage\", \"https://i.postimg.cc/154HV439/11.png\"); // обычное изображение\n    this.load.image(\"defaultAutorButtonImage\", \"https://i.postimg.cc/fRKLWdbT/author-Button.png\");\n}\n// функция create - создает сцену\nfunction $dad545c909cfec2d$var$create() {\n    const { width: width  } = this.sys.game.config;\n    const { height: height  } = this.sys.game.config;\n    const background = this.add.image(0, 0, \"background\").setOrigin(0, 0);\n    const logo = this.add.image(width / 2, height / 2 - 130, \"logo\");\n    const resizeBackground = ()=>{\n        if (this.cameras.main) {\n            const scaleX = this.cameras.main.width / background.width;\n            const scaleY = this.cameras.main.height / background.height;\n            const scale = Math.max(scaleX, scaleY);\n            background.setScale(scale).setScrollFactor(0);\n        }\n    };\n    const resizeLogo = ()=>{\n        const scale = width / 1050; // Предполагаем, что исходная ширина логотипа 1920\n        logo.setScale(scale);\n    };\n    resizeBackground();\n    resizeLogo();\n    this.scale.on(\"resize\", ()=>{\n        resizeBackground();\n        resizeLogo();\n    });\n    const defaultPlayButtonImage = this.add.image(width / 2, height / 2, \"defaultPlayButtonImage\").setInteractive().on(\"pointerdown\", startGame.bind(this)); // Вот здесь мы привязываем контекст\n    defaultPlayButtonImage.on(\"pointerover\", ()=>{\n        defaultPlayButtonImage.setScale(1.05); // Увеличение размера при наведении\n    });\n    defaultPlayButtonImage.on(\"pointerout\", ()=>{\n        defaultPlayButtonImage.setScale(1); // Возврат к обычному размеру при уходе указателя\n    });\n    const creditsButton = this.add.image(width / 2, height / 2 + 110, \"defaultAutorButtonImage\").setInteractive().on(\"pointerdown\", ()=>credits());\n    creditsButton.on(\"pointerover\", ()=>{\n        creditsButton.setScale(1.05); // Увеличение размера при наведении\n    });\n    creditsButton.on(\"pointerout\", ()=>{\n        creditsButton.setScale(1); // Возврат к обычному размеру при уходе указателя\n    });\n    function startGame() {\n        console.log(\"Игра начинается...\");\n        // Здесь вы можете переключиться на другую сцену, которая запускает игру\n        this.scene.start(\"gameScene\");\n    }\n    function credits() {\n        console.log(\"Открытие титров...\");\n    // тут пропишем переключение на сцену для титров\n    }\n}\n\n\n//# sourceMappingURL=index.55e8eb0d.js.map\n","import { gameScene } from './game/gameScene.js';\n\nconst config = {\n  type: Phaser.AUTO,\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: window.innerWidth,\n    height: window.innerHeight,\n  },\n  scene: [{ preload, create }, gameScene], // Передаем в конструктор массив сцен\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 300 },\n      debug: false,\n    },\n  },\n};\n\nconst game = new Phaser.Game(config);\n// функция preload отвечает за ассеты которые игра должна подтянуть для себя)\nfunction preload() {\n  this.load.image('background', 'https://i.postimg.cc/W1j6zxMm/wallpaperbetter-com-3840x2160-3.jpg');\n  this.load.image('logo', 'https://i.postimg.cc/8Cn1XJDy/image.png');\n  this.load.image('defaultPlayButtonImage', 'https://i.postimg.cc/154HV439/11.png'); // обычное изображение\n  this.load.image('defaultAutorButtonImage', 'https://i.postimg.cc/fRKLWdbT/author-Button.png');\n}\n// функция create - создает сцену\nfunction create() {\n  const { width } = this.sys.game.config;\n  const { height } = this.sys.game.config;\n\n  const background = this.add.image(0, 0, 'background').setOrigin(0, 0);\n  const logo = this.add.image(width / 2, height / 2 - 130, 'logo');\n\n  const resizeBackground = () => {\n    if (this.cameras.main) {\n      const scaleX = this.cameras.main.width / background.width;\n      const scaleY = this.cameras.main.height / background.height;\n      const scale = Math.max(scaleX, scaleY);\n      background.setScale(scale).setScrollFactor(0);\n    }\n  };\n  const resizeLogo = () => {\n    const scale = width / 1050; // Предполагаем, что исходная ширина логотипа 1920\n    logo.setScale(scale);\n  };\n\n  resizeBackground();\n  resizeLogo();\n\n  this.scale.on('resize', () => {\n    resizeBackground();\n    resizeLogo();\n  });\n  const defaultPlayButtonImage = this.add.image(width / 2, height / 2, 'defaultPlayButtonImage')\n    .setInteractive()\n    .on('pointerdown', startGame.bind(this)); // Вот здесь мы привязываем контекст\n\n  defaultPlayButtonImage.on('pointerover', () => {\n    defaultPlayButtonImage.setScale(1.05); // Увеличение размера при наведении\n  });\n\n  defaultPlayButtonImage.on('pointerout', () => {\n    defaultPlayButtonImage.setScale(1); // Возврат к обычному размеру при уходе указателя\n  });\n\n  const creditsButton = this.add.image(width / 2, height / 2 + 110, 'defaultAutorButtonImage')\n    .setInteractive()\n    .on('pointerdown', () => credits());\n\n  creditsButton.on('pointerover', () => {\n    creditsButton.setScale(1.05); // Увеличение размера при наведении\n  });\n\n  creditsButton.on('pointerout', () => {\n    creditsButton.setScale(1); // Возврат к обычному размеру при уходе указателя\n  });\n\n  function startGame() {\n    console.log('Игра начинается...');\n    // Здесь вы можете переключиться на другую сцену, которая запускает игру\n    this.scene.start('gameScene');\n  }\n\n  function credits() {\n    console.log('Открытие титров...');\n    // тут пропишем переключение на сцену для титров\n  }\n}\n","const gameScene = new Phaser.Class({\n  Extends: Phaser.Scene,\n\n  initialize: function GameScene() {\n    Phaser.Scene.call(this, { key: 'gameScene' });\n  },\n\n  preload() { // загрузка ассетов игры\n    this.load.image('backgroundGame', 'https://i.postimg.cc/ncCJCFZ6/wallpaperbetter-com-3840x2160-1.jpg');\n    this.load.spritesheet('tHex', 'https://i.postimg.cc/SsRRc797/spritesheet.png', {\n      frameWidth: 243,\n      frameHeight: 370,\n    });\n    this.load.image('ground', 'https://i.postimg.cc/8c9BWznw/ground.png');\n  },\n\n  create() {\n    this.anims.create({\n      key: 'jump',\n      frames: this.anims.generateFrameNumbers('tHex', { start: 1, end: 1 }),\n      frameRate: 10,\n    });\n    this.anims.create({\n      key: 'idle',\n      frames: this.anims.generateFrameNumbers('tHex', { start: 0, end: 0 }),\n      frameRate: 10,\n    });\n    const { width, height } = this.sys.game.config;\n    this.backgroundImage = this.add.tileSprite(0, 0, this.sys.game.config.width, this.sys.game.config.height, 'backgroundGame').setOrigin(0, 0).setScrollFactor(0).setScale(1920 / width, 1200 / height);\n    const tHex = this.physics.add.sprite(1080, this.sys.game.config.height - 200, 'tHex'); // персонаж\n    this.grounds = this.physics.add.staticGroup();\n    for (let i = 0; i < 3; i += 1) {\n      const ground = this.grounds.create(1080 + i * 1080, this.sys.game.config.height, 'ground');\n      this.physics.add.collider(tHex, ground);\n    }\n    tHex.setGravityY(800); // гравитация по вертикали\n    tHex.setScale(0.5); // масштабирование персонажа\n    const cursors = this.input.keyboard.createCursorKeys(); // объект, содержащий клавиши управления\n    const jump = () => {\n      if (tHex.body.touching.down) {\n        tHex.setVelocityY(-500);\n        this.isRunning = true;\n        this.score += 10; // начисление 10 баллов за прыжок\n        this.scoreText.setText(`Score: ${this.score}`); // обновление текста счета\n        tHex.anims.play('jump'); // текстура прыжка\n      }\n    };\n    cursors.up.on('down', jump); // прыжок по стрелке вверх\n    cursors.space.on('down', jump); // прыжок по пробелу\n    this.input.on('pointerdown', jump); // прыжок по нажатию экрана\n    this.speed = 5; // скорость перемещения персонажа\n    this.isRunning = false;\n    this.cameras.main.startFollow(tHex, true, 0.5, 0.5, 0, 150);\n    this.score = 0; // переменная для хранения текущего счета\n    this.scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '32px', fill: '#fff', fontFamily: 'MinecraftiaRegular' }); // текст счета\n    this.scoreText.setScrollFactor(0);\n    // функция обновления, перемещающая персонажа вперед\n    this.update = () => {\n      if (this.isRunning) {\n        tHex.x += this.speed;\n        this.backgroundImage.tilePositionX = this.cameras.main.scrollX * 0.3; // медленное движение\n      }\n      if (tHex.body.touching.down && tHex.anims.currentAnim && tHex.anims.currentAnim.key === 'jump') {\n        tHex.anims.play('idle'); // Воспроизведение обычной анимации персонажа\n      }\n      if (tHex.x > this.grounds.getChildren()[0].x + 1080) {\n        // Удалить старую землю\n        this.grounds.getChildren()[0].destroy();\n        // Добавить новую землю\n        const newGround = this.grounds.create(this.grounds.getChildren()[this.grounds.getChildren().length - 1].x + 1080, this.sys.game.config.height, 'ground');\n        this.physics.add.collider(tHex, newGround);\n      }\n    };\n  },\n});\n\nexport { gameScene };\n"],"names":["$c0d418836dfbaed1$export$5f56c9ecdfdf4895","Phaser","Class","Extends","Scene","initialize","call","key","preload","load","image","spritesheet","frameWidth","frameHeight","create","anims","frames","generateFrameNumbers","start","end","frameRate","width","height","sys","game","config","backgroundImage","add","tileSprite","setOrigin","setScrollFactor","setScale","tHex","physics","sprite","grounds","staticGroup","i","ground","collider","setGravityY","cursors","input","keyboard","createCursorKeys","jump","body","touching","down","setVelocityY","isRunning","score","scoreText","setText","play","up","on","space","speed","cameras","main","startFollow","text","fontSize","fill","fontFamily","update","x","tilePositionX","scrollX","currentAnim","getChildren","destroy","newGround","length","$dad545c909cfec2d$var$config","type","AUTO","scale","mode","Scale","RESIZE","autoCenter","CENTER_BOTH","window","innerWidth","innerHeight","scene","background","logo","resizeBackground","scaleX","scaleY","Math","max","resizeLogo","defaultPlayButtonImage","setInteractive","startGame","console","log","bind","creditsButton","default","arcade","gravity","y","debug","Game"],"version":3,"file":"index.55e8eb0d.js.map"}