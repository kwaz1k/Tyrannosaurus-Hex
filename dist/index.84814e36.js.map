{"mappings":"AEAA,MAAM,EAAY,IAAI,OAAO,KAAA,CAAM,CACjC,QAAS,OAAO,KAAhB,CAEA,WAAY,WACV,OAAO,KAAA,CAAM,IAAA,CAAK,IAAI,CAAE,CAAE,IAAK,WAAY,EAC7C,EAEA,UACE,IAAI,CAAC,IAAA,CAAK,KAAA,CAAM,aAAc,sDAC9B,IAAI,CAAC,IAAA,CAAK,WAAA,CAAY,OAAQ,yCAA0C,CACtE,WAAY,IACZ,YAAa,GACf,GACA,IAAI,CAAC,IAAA,CAAK,KAAA,CAAM,SAAU,sFAC5B,EAEA,SAE0B,IAAI,CAAC,GAAA,CAAI,KAAA,CAAM,IAAK,IAAK,cACjD,IAAM,EAAO,IAAI,CAAC,OAAA,CAAQ,GAAA,CAAI,MAAA,CAAO,IAAK,IAAK,QAC/C,EAAK,WAAA,CAAY,KACjB,EAAK,QAAA,CAAS,IACd,IAAM,EAAS,IAAI,CAAC,OAAA,CAAQ,GAAA,CAAI,WAAA,CAAY,IAAK,IAAK,UACtD,EAAO,QAAA,CAAS,GAAG,WAAnB,GACA,IAAI,CAAC,OAAA,CAAQ,GAAA,CAAI,QAAA,CAAS,EAAM,EAClC,EAEA,SAEA,CACF,GD5BM,EAAS,CACb,KAAM,OAAO,IAAb,CACA,MAAO,KACP,OAAQ,IACR,MAAO,CAAC,CAAE,QAYZ,WACE,IAAI,CAAC,IAAA,CAAK,KAAA,CAAM,aAAc,qDAChC,EAdqB,OAgBrB,WACE,IAAI,CAAC,GAAA,CAAI,KAAA,CAAM,IAAK,IAAK,cAEN,IAAI,CAAC,GAAA,CAAI,IAAA,CAAK,IAAK,IAAK,aAAc,CAAE,KAAM,MAAO,GACrE,cAAA,GACA,EAAA,CAAG,cAAe,AAUrB,CAAA,WACE,QAAQ,GAAA,CAAI,sBAEZ,IAAI,CAAC,KAAA,CAAM,KAAA,CAAM,YACnB,CAAA,EAd+B,IAAA,CAAK,IAAI,GAEf,IAAI,CAAC,GAAA,CAAI,IAAA,CAAK,IAAK,IAAK,eAAgB,CAAE,KAAM,MAAO,GAC7E,cAAA,GACA,EAAA,CAAG,cAAe,SAanB,QAAQ,GAAA,CAAI,8BAXQ,IAAI,CAAC,GAAA,CAAI,IAAA,CAAK,IAAK,IAAK,SAAU,CAAE,KAAM,MAAO,GACpE,cAAA,GACA,EAAA,CAAG,cAAe,SAcnB,QAAQ,GAAA,CAAI,sBAGhB,CA9C4B,EAAG,EAAU,CACvC,QAAS,CACP,QAAS,SACT,OAAQ,CACN,QAAS,CAAE,EAAG,GAAI,EAClB,MAAO,CAAA,CACT,CACF,CACF,EAEa,IAAI,OAAO,IAAA,CAAK","sources":["<anon>","index.js","game/gameScene.js"],"sourcesContent":["const $c0d418836dfbaed1$export$5f56c9ecdfdf4895 = new Phaser.Class({\n    Extends: Phaser.Scene,\n    initialize: function GameScene() {\n        Phaser.Scene.call(this, {\n            key: \"gameScene\"\n        });\n    },\n    preload () {\n        this.load.image(\"background\", \"https://i.postimg.cc/xnf9kMsf/background2.jpg?dl=1\");\n        this.load.spritesheet(\"tHex\", \"https://i.postimg.cc/7Pn95fxc/1-bu.png\", {\n            frameWidth: 243,\n            frameHeight: 370\n        });\n        this.load.image(\"ground\", \"https://upload.wikimedia.org/wikipedia/commons/2/22/Chromium_T-Rex-offline-trex.png\");\n    },\n    create () {\n        // Add a background image\n        const backgroundImage = this.add.image(700, 250, \"background\"); // тут надо придумать как сделать обои и землю бесконечными\n        const tHex = this.physics.add.sprite(100, 100, \"tHex\"); // непосредственно чубрик наш.\n        tHex.setGravityY(800); // гравитация по вертикали для братца нашего\n        tHex.setScale(0.5); // масштабируем чубрика(он слишком здоровый в оригинале)\n        const ground = this.physics.add.staticImage(400, 720, \"ground\"); // тут надо придумать как сделать обои и землю бесконечными\n        ground.setScale(2).refreshBody();\n        this.physics.add.collider(tHex, ground); // тут мы заставляем чубрика падать именно на землю.\n    },\n    update () {\n    // Обновление игровой сцены\n    }\n});\n\n\nconst $dad545c909cfec2d$var$config = {\n    type: Phaser.AUTO,\n    width: 1280,\n    height: 720,\n    scene: [\n        {\n            preload: $dad545c909cfec2d$var$preload,\n            create: $dad545c909cfec2d$var$create\n        },\n        (0, $c0d418836dfbaed1$export$5f56c9ecdfdf4895)\n    ],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            gravity: {\n                y: 300\n            },\n            debug: false\n        }\n    }\n};\nconst $dad545c909cfec2d$var$game = new Phaser.Game($dad545c909cfec2d$var$config);\n// функция preload отвечает за ассеты которые игра должна подтянуть для себя)\nfunction $dad545c909cfec2d$var$preload() {\n    this.load.image(\"background\", \"https://i.postimg.cc/xnf9kMsf/background2.jpg?dl=1\");\n}\n// функция create - создает сцену\nfunction $dad545c909cfec2d$var$create() {\n    this.add.image(700, 250, \"background\");\n    const playButton = this.add.text(460, 300, \"Новая игра\", {\n        fill: \"#0f0\"\n    }).setInteractive().on(\"pointerdown\", startGame.bind(this)); // Вот здесь мы привязываем контекст\n    // тут пока ничего не делаем\n    const leveChoiceButton = this.add.text(660, 300, \"Выбор уровня\", {\n        fill: \"#0f0\"\n    }).setInteractive().on(\"pointerdown\", ()=>levelChoice());\n    // тут пока ничего не делаем\n    const creditsButton = this.add.text(890, 300, \"Авторы\", {\n        fill: \"#0f0\"\n    }).setInteractive().on(\"pointerdown\", ()=>credits());\n    function startGame() {\n        console.log(\"Игра начинается...\");\n        // Здесь вы можете переключиться на другую сцену, которая запускает игру\n        this.scene.start(\"gameScene\");\n    }\n    function levelChoice() {\n        console.log(\"Открытие выбора уровня...\");\n    // тут пропишем переключение на сцену для уровней(если все-таки будем их делать)\n    }\n    function credits() {\n        console.log(\"Открытие титров...\");\n    // тут пропишем переключение на сцену для титров\n    }\n}\n\n\n//# sourceMappingURL=index.84814e36.js.map\n","import { gameScene } from './game/gameScene.js';\n\nconst config = {\n  type: Phaser.AUTO,\n  width: 1280,\n  height: 720,\n  scene: [{ preload, create }, gameScene], // Передаем в конструктор массив сцен\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 300 },\n      debug: false,\n    },\n  },\n};\n\nconst game = new Phaser.Game(config);\n// функция preload отвечает за ассеты которые игра должна подтянуть для себя)\nfunction preload() {\n  this.load.image('background', 'https://i.postimg.cc/xnf9kMsf/background2.jpg?dl=1');\n}\n// функция create - создает сцену\nfunction create() {\n  this.add.image(700, 250, 'background');\n\n  const playButton = this.add.text(460, 300, 'Новая игра', { fill: '#0f0' })\n    .setInteractive()\n    .on('pointerdown', startGame.bind(this)); // Вот здесь мы привязываем контекст\n  // тут пока ничего не делаем\n  const leveChoiceButton = this.add.text(660, 300, 'Выбор уровня', { fill: '#0f0' })\n    .setInteractive()\n    .on('pointerdown', () => levelChoice());\n  // тут пока ничего не делаем\n  const creditsButton = this.add.text(890, 300, 'Авторы', { fill: '#0f0' })\n    .setInteractive()\n    .on('pointerdown', () => credits());\n\n  function startGame() {\n    console.log('Игра начинается...');\n    // Здесь вы можете переключиться на другую сцену, которая запускает игру\n    this.scene.start('gameScene');\n  }\n\n  function levelChoice() {\n    console.log('Открытие выбора уровня...');\n    // тут пропишем переключение на сцену для уровней(если все-таки будем их делать)\n  }\n\n  function credits() {\n    console.log('Открытие титров...');\n    // тут пропишем переключение на сцену для титров\n  }\n}\n","const gameScene = new Phaser.Class({\n  Extends: Phaser.Scene,\n\n  initialize: function GameScene() {\n    Phaser.Scene.call(this, { key: 'gameScene' });\n  },\n\n  preload() { // опять же, в прилоаде ассеты для игры\n    this.load.image('background', 'https://i.postimg.cc/xnf9kMsf/background2.jpg?dl=1');\n    this.load.spritesheet('tHex', 'https://i.postimg.cc/7Pn95fxc/1-bu.png', {\n      frameWidth: 243,\n      frameHeight: 370,\n    });\n    this.load.image('ground', 'https://upload.wikimedia.org/wikipedia/commons/2/22/Chromium_T-Rex-offline-trex.png');\n  },\n\n  create() {\n  // Add a background image\n    const backgroundImage = this.add.image(700, 250, 'background'); // тут надо придумать как сделать обои и землю бесконечными\n    const tHex = this.physics.add.sprite(100, 100, 'tHex'); // непосредственно чубрик наш.\n    tHex.setGravityY(800); // гравитация по вертикали для братца нашего\n    tHex.setScale(0.5); // масштабируем чубрика(он слишком здоровый в оригинале)\n    const ground = this.physics.add.staticImage(400, 720, 'ground'); // тут надо придумать как сделать обои и землю бесконечными\n    ground.setScale(2).refreshBody();\n    this.physics.add.collider(tHex, ground); // тут мы заставляем чубрика падать именно на землю.\n  },\n\n  update() {\n    // Обновление игровой сцены\n  },\n});\n\nexport { gameScene };\n"],"names":["$c0d418836dfbaed1$export$5f56c9ecdfdf4895","Phaser","Class","Extends","Scene","initialize","call","key","preload","load","image","spritesheet","frameWidth","frameHeight","create","add","tHex","physics","sprite","setGravityY","setScale","ground","staticImage","refreshBody","collider","update","$dad545c909cfec2d$var$config","type","AUTO","width","height","scene","text","fill","setInteractive","on","startGame","console","log","start","bind","default","arcade","gravity","y","debug","Game"],"version":3,"file":"index.84814e36.js.map"}